{
	"info": {
		"_postman_id": "64eac538-e4d8-4148-b375-05884b603732",
		"name": "Request",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CreateRequestByUserWithProfil_USER_A",
			"item": [
				{
					"name": "CreateRequestWithName",
					"item": [
						{
							"name": "http://{{domain}}/ws/sec/requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8675312-4c64-4af2-a585-eb7e467104db",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"console.log(jsonData);",
											"var requestID = jsonData.requestId;",
											"postman.setEnvironmentVariable(\"requestID\", requestID);",
											"console.log(\"requestID \"+requestID);",
											"",
											"pm.test(\"response must be valid and have a body and a requestID\", function () {",
											"     // assert that the status code is 200",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"     pm.expect(jsonData.requestId).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "boisset",
											"type": "string"
										},
										{
											"key": "username",
											"value": "denisB",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "app/testsAPI/RequestFromUSER_AWithName.json"
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "caa3ca8d-3883-40b5-b9be-06bd9a2daf9f",
										"exec": [
											"console.log(\"/ws/sec/requests/\"+postman.getEnvironmentVariable(\"requestID\"));\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"console.log(jsonData.name);\r",
											"\r",
											"pm.test(\"request has only name\", function () {\r",
											"   pm.expect(jsonData.name).to.equal('Request From USER_A With Name');\r",
											"   pm.expect(jsonData.textDescription).to.eq(null);\r",
											"   pm.expect(jsonData.videoDescription).to.eq(null);\r",
											"   pm.expect(jsonData.signId).to.eq(null);\r",
											"   pm.expect(jsonData.signName).to.eq(null);\r",
											"   pm.expect(jsonData.userName).to.eq('denisB');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "boisset",
											"type": "string"
										},
										{
											"key": "username",
											"value": "denisB",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CreateRequestWithNameAndTextDescription",
					"item": [
						{
							"name": "http://{{domain}}/ws/sec/requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b566110-df2a-482d-a5f3-aadb7b3a192b",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"console.log(jsonData);",
											"var requestID = jsonData.requestId;",
											"postman.setEnvironmentVariable(\"requestID\", requestID);",
											"console.log(\"requestID \"+requestID);",
											"",
											"pm.test(\"response must be valid and have a body and a requestID\", function () {",
											"     // assert that the status code is 200",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"     pm.expect(jsonData.requestId).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "boisset",
											"type": "string"
										},
										{
											"key": "username",
											"value": "denisB",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "app/testsAPI/RequestFromUSER_AWithNameAndTextDescription.json"
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "385929aa-07c6-40d6-9265-c96ab03ed8da",
										"exec": [
											"console.log(\"/ws/sec/requests/\"+postman.getEnvironmentVariable(\"requestID\"));\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"console.log(jsonData.name);\r",
											"\r",
											"pm.test(\"request has name and text description\", function () {\r",
											"   pm.expect(jsonData.name).to.equal('Request From USER_A With Name And Text Description');\r",
											"   pm.expect(jsonData.textDescription).to.eq('This is a request create By USER_A with Name and Text Description');\r",
											"   pm.expect(jsonData.videoDescription).to.eq(null);\r",
											"   pm.expect(jsonData.signId).to.eq(null);\r",
											"   pm.expect(jsonData.signName).to.eq(null);\r",
											"   pm.expect(jsonData.userName).to.eq('denisB');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "boisset",
											"type": "string"
										},
										{
											"key": "username",
											"value": "denisB",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CreateRequestWithNameAndVideoDescription",
					"item": [
						{
							"name": "http://{{domain}}/ws/sec/requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32c498a1-0774-4277-98b4-e65cbb70c428",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"console.log(jsonData);",
											"var requestID = jsonData.requestId;",
											"postman.setEnvironmentVariable(\"requestID\", requestID);",
											"console.log(\"requestID \"+requestID);",
											"",
											"pm.test(\"response must be valid and have a body and a requestID\", function () {",
											"     // assert that the status code is 200",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"     pm.expect(jsonData.requestId).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "boisset",
											"type": "string"
										},
										{
											"key": "username",
											"value": "denisB",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "app/testsAPI/RequestFromUSER_AWithNameAndVideoDescription.json"
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "app/testsAPI/ivs0ljs6ymux16fz2ol.webm"
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "385929aa-07c6-40d6-9265-c96ab03ed8da",
										"exec": [
											"console.log(\"/ws/sec/requests/\"+postman.getEnvironmentVariable(\"requestID\"));\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"console.log(jsonData.name);\r",
											"\r",
											"pm.test(\"request has name and video description\", function () {\r",
											"   pm.expect(jsonData.name).to.equal('Request From USER_A With Name And Video Description');\r",
											"   pm.expect(jsonData.textDescription).to.eq(null);\r",
											"   pm.expect(jsonData.videoDescription).not.eq(null);\r",
											"   pm.expect(jsonData.signId).to.eq(null);\r",
											"   pm.expect(jsonData.signName).to.eq(null);\r",
											"   pm.expect(jsonData.userName).to.eq('denisB');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "boisset",
											"type": "string"
										},
										{
											"key": "username",
											"value": "denisB",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CreateRequestWithNameAndAddTextVideoDescription",
					"item": [
						{
							"name": "http://{{domain}}/ws/sec/requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8675312-4c64-4af2-a585-eb7e467104db",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"console.log(jsonData);",
											"var requestID = jsonData.requestId;",
											"postman.setEnvironmentVariable(\"requestID\", requestID);",
											"console.log(\"requestID \"+requestID);",
											"",
											"pm.test(\"response must be valid and have a body and a requestID\", function () {",
											"     // assert that the status code is 200",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"     pm.expect(jsonData.requestId).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "boisset",
											"type": "string"
										},
										{
											"key": "username",
											"value": "denisB",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "app/testsAPI/RequestFromUSER_AWithNameAndAddTextVideoDescription.json"
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "caa3ca8d-3883-40b5-b9be-06bd9a2daf9f",
										"exec": [
											"console.log(\"/ws/sec/requests/\"+postman.getEnvironmentVariable(\"requestID\"));\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"console.log(jsonData.name);\r",
											"\r",
											"pm.test(\"request has only name\", function () {\r",
											"   pm.expect(jsonData.name).to.equal('Request From USER_A With Name And Add Text Video Description');\r",
											"   pm.expect(jsonData.textDescription).to.eq(null);\r",
											"   pm.expect(jsonData.videoDescription).to.eq(null);\r",
											"   pm.expect(jsonData.signId).to.eq(null);\r",
											"   pm.expect(jsonData.signName).to.eq(null);\r",
											"   pm.expect(jsonData.userName).to.eq('denisB');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "boisset",
											"type": "string"
										},
										{
											"key": "username",
											"value": "denisB",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d52fde91-c741-45d5-a6f7-618afae3d739",
										"exec": [
                      "var jsonData = JSON.parse(responseBody);",
											"pm.test(\"response must be valid and have a body and a requestID\", function () {",
											"     // assert that the status code is 200",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"     pm.expect(jsonData.requestId).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "boisset",
											"type": "string"
										},
										{
											"key": "username",
											"value": "denisB",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "app/testsAPI/RequestFromUSER_AAddTextDescription.json"
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "app/testsAPI/ivs0ljs6ymux16fz2ol.webm"
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "caa3ca8d-3883-40b5-b9be-06bd9a2daf9f",
										"exec": [
											"console.log(\"/ws/sec/requests/\"+postman.getEnvironmentVariable(\"requestID\"));\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"console.log(jsonData.name);\r",
											"\r",
											"pm.test(\"request has only name and add text and video description\", function () {\r",
											"   pm.expect(jsonData.name).to.equal('Request From USER_A With Name And Add Text Video Description');\r",
											"   pm.expect(jsonData.textDescription).to.eq('This is a request modify By USER_A to add a Text Description');\r",
											"   pm.expect(jsonData.videoDescription).not.eq(null);\r",
											"   pm.expect(jsonData.signId).to.eq(null);\r",
											"   pm.expect(jsonData.signName).to.eq(null);\r",
											"   pm.expect(jsonData.userName).to.eq('denisB');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "boisset",
											"type": "string"
										},
										{
											"key": "username",
											"value": "denisB",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CreateRequestWithNameAndAddTextAndVideoDescription",
					"item": [
						{
							"name": "http://{{domain}}/ws/sec/requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8675312-4c64-4af2-a585-eb7e467104db",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"console.log(jsonData);",
											"var requestID = jsonData.requestId;",
											"postman.setEnvironmentVariable(\"requestID\", requestID);",
											"console.log(\"requestID \"+requestID);",
											"",
											"pm.test(\"response must be valid and have a body and a requestID\", function () {",
											"     // assert that the status code is 200",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"     pm.expect(jsonData.requestId).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "boisset",
											"type": "string"
										},
										{
											"key": "username",
											"value": "denisB",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "app/testsAPI/RequestFromUSER_AWithNameAndAddTextAndVideoDescription.json"
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "caa3ca8d-3883-40b5-b9be-06bd9a2daf9f",
										"exec": [
											"console.log(\"/ws/sec/requests/\"+postman.getEnvironmentVariable(\"requestID\"));\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"console.log(jsonData.name);\r",
											"\r",
											"pm.test(\"request has only name\", function () {\r",
											"   pm.expect(jsonData.name).to.equal('Request From USER_A With Name And Add Text And Video Description');\r",
											"   pm.expect(jsonData.textDescription).to.eq(null);\r",
											"   pm.expect(jsonData.videoDescription).to.eq(null);\r",
											"   pm.expect(jsonData.signId).to.eq(null);\r",
											"   pm.expect(jsonData.signName).to.eq(null);\r",
											"   pm.expect(jsonData.userName).to.eq('denisB');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "boisset",
											"type": "string"
										},
										{
											"key": "username",
											"value": "denisB",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8e0bf6f-e920-415d-9ab2-555ac31f7ab4",
										"exec": [
                      "var jsonData = JSON.parse(responseBody);",
											"pm.test(\"response must be valid and have a body and a requestID\", function () {",
											"     // assert that the status code is 200",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"     pm.expect(jsonData.requestId).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "boisset",
											"type": "string"
										},
										{
											"key": "username",
											"value": "denisB",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "app/testsAPI/RequestFromUSER_AAddTextDescription.json"
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "caa3ca8d-3883-40b5-b9be-06bd9a2daf9f",
										"exec": [
											"console.log(\"/ws/sec/requests/\"+postman.getEnvironmentVariable(\"requestID\"));\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"console.log(jsonData.name);\r",
											"\r",
											"pm.test(\"request has only name and add text description\", function () {\r",
											"   pm.expect(jsonData.name).to.equal('Request From USER_A With Name And Add Text And Video Description');\r",
											"   pm.expect(jsonData.textDescription).to.eq('This is a request modify By USER_A to add a Text Description');\r",
											"   pm.expect(jsonData.videoDescription).to.eq(null);\r",
											"   pm.expect(jsonData.signId).to.eq(null);\r",
											"   pm.expect(jsonData.signName).to.eq(null);\r",
											"   pm.expect(jsonData.userName).to.eq('denisB');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "boisset",
											"type": "string"
										},
										{
											"key": "username",
											"value": "denisB",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1cca72a-4141-4877-8e8b-31eeee7ab70d",
										"exec": [
                      "var jsonData = JSON.parse(responseBody);",
											"pm.test(\"response must be valid and have a body and a requestID\", function () {",
											"     // assert that the status code is 200",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"     pm.expect(jsonData.requestId).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "boisset",
											"type": "string"
										},
										{
											"key": "username",
											"value": "denisB",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "",
											"disabled": true
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "app/testsAPI/ivs0ljs6ymux16fz2ol.webm"
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "caa3ca8d-3883-40b5-b9be-06bd9a2daf9f",
										"exec": [
											"console.log(\"/ws/sec/requests/\"+postman.getEnvironmentVariable(\"requestID\"));\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"console.log(jsonData.name);\r",
											"\r",
											"pm.test(\"request has only name and add text and video description\", function () {\r",
											"   pm.expect(jsonData.name).to.equal('Request From USER_A With Name And Add Text And Video Description');\r",
											"   pm.expect(jsonData.textDescription).to.eq('This is a request modify By USER_A to add a Text Description');\r",
											"   pm.expect(jsonData.videoDescription).not.eq(null);\r",
											"   pm.expect(jsonData.signId).to.eq(null);\r",
											"   pm.expect(jsonData.signName).to.eq(null);\r",
											"   pm.expect(jsonData.userName).to.eq('denisB');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "boisset",
											"type": "string"
										},
										{
											"key": "username",
											"value": "denisB",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "GetMyRequests",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/users/me/requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c593ffdf-3080-4b8f-a3c3-115f8628cb17",
								"exec": [
									"console.log(\"/ws/sec/users/me/requests\");\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"var schema = {\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"textDescription\": {\r",
									"            \"type\": [\"string\",\"null\"]\r",
									"        },\r",
									"        \"videoDescription\": {\r",
									"            \"type\": [\"string\",\"null\"]\r",
									"        },\r",
									"        \"date\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"         \"signId\": {\r",
									"            \"type\": [\"string\", \"null\"]\r",
									"        },\r",
									"         \"signName\": {\r",
									"            \"type\": [\"string\", \"null\"]\r",
									"        },\r",
									"         \"userName\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"id\",\"name\", \"date\", \"userName\"]\r",
									"}\r",
									"\r",
									"console.log(jsonData);\r",
									"\r",
									"jsonData.forEach(function(myRequest) {\r",
									"var testTitle = \"myRequest \" + myRequest.id + \" conforms to schema\";\r",
									"tests[testTitle] = tv4.validate(myRequest, schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/users/me/requests",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"users",
								"me",
								"requests"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetMyRequestsSortByDateAsc",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/users/me/requests?sort=-date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53c5de7a-120c-4783-b778-c47929e1f0f1",
								"exec": [
									"var _ = require('lodash'),\r",
									"\r",
									"    // Parse the array returned in the response body (It is probably a stringified response)\r",
									"    responseArray = JSON.parse(responseBody);\r",
									"\r",
									"pm.test('My Requests are sorted order by create date asc', () => {\r",
									"    // Use the responseArray here\r",
									"    var expectedSortedOrder = _.orderBy(responseArray, ['date'],['asc']);\r",
									"\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/users/me/requests?sort=-date",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"users",
								"me",
								"requests"
							],
							"query": [
								{
									"key": "sort",
									"value": "-date"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetMyRequestsSortByNameAsc",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/users/me/requests?sort=name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "391ee39f-a0ec-44dc-a7db-682bb71ef6c3",
								"exec": [
									"var _ = require('lodash'),\r",
									"\r",
									"    // Parse the array returned in the response body (It is probably a stringified response)\r",
									"    responseArray = JSON.parse(responseBody);\r",
									"\r",
									"var lowerCaseRequests = _.clone(responseArray);\r",
									"lowerCaseRequests = lowerCaseRequests.map(request => {\r",
									"   request.name =_.deburr(request.name.toLowerCase()); \r",
									"   return request;\r",
									"});\r",
									"\r",
									"pm.test('My Requests are sorted order by name asc', () => {\r",
									"    // Use the responseArray here\r",
									"    var expectedSortedOrder = _.orderBy(lowerCaseRequests, ['name'],['asc']);\r",
									"\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/users/me/requests?sort=name",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"users",
								"me",
								"requests"
							],
							"query": [
								{
									"key": "sort",
									"value": "name"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetMyRequestsSortByDateDesc",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/users/me/requests?sort=date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90df0a5c-047d-4cb5-814b-1442e193e552",
								"exec": [
									"var _ = require('lodash'),\r",
									"\r",
									"    // Parse the array returned in the response body (It is probably a stringified response)\r",
									"    responseArray = JSON.parse(responseBody);\r",
									"\r",
									"pm.test('My Requests are sorted order by create date desc', () => {\r",
									"    // Use the responseArray here\r",
									"    var expectedSortedOrder = _.orderBy(responseArray, ['date'],['desc']);\r",
									"\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/users/me/requests?sort=date",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"users",
								"me",
								"requests"
							],
							"query": [
								{
									"key": "sort",
									"value": "date"
								}
							]
						}
					},
					"response": []
				}
			]
		},
    {
      "name": "GetMyRequestsSortByNameDesc",
      "item": [
        {
          "name": "http://{{domain}}/ws/sec/users/me/requests?sort=-name",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1138d095-2be8-480d-b7a7-8bd0cc54b034",
                "exec": [
                  "var _ = require('lodash'),\r",
                  "\r",
                  "    // Parse the array returned in the response body (It is probably a stringified response)\r",
                  "    responseArray = JSON.parse(responseBody);\r",
                  "\r",
                  "var lowerCaseRequests = _.clone(responseArray);\r",
                  "lowerCaseRequests = lowerCaseRequests.map(request => {\r",
                  "   request.name = _.deburr(request.name.toLowerCase()); \r",
                  "   return request;\r",
                  "});\r",
                  "\r",
                  "pm.test('My Requests are sorted order by name desc', () => {\r",
                  "    // Use the responseArray here\r",
                  "    var expectedSortedOrder = _.orderBy(lowerCaseRequests, ['name'],['desc']);\r",
                  "\r",
                  "    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "key": "password",
                  "value": "boisset",
                  "type": "string"
                },
                {
                  "key": "username",
                  "value": "denisB",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "http://{{domain}}/ws/sec/users/me/requests?sort=-name",
              "protocol": "http",
              "host": [
                "{{domain}}"
              ],
              "path": [
                "ws",
                "sec",
                "users",
                "me",
                "requests"
              ],
              "query": [
                {
                  "key": "sort",
                  "value": "-name"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "_postman_isSubFolder": true
    },
		{
			"name": "CreateRequestByUserWithProfil_USER",
			"item": [
				{
					"name": "CreateRequestWithName",
					"item": [
						{
							"name": "http://{{domain}}/ws/sec/requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4c9ccad-5296-4d32-87cd-1ba3c6ffeb35",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"console.log(jsonData);",
											"var requestID = jsonData.requestId;",
											"postman.setEnvironmentVariable(\"requestID\", requestID);",
											"console.log(\"requestID \"+requestID);",
											"",
											"pm.test(\"response must be valid and have a body and a requestID\", function () {",
											"     // assert that the status code is 200",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"     pm.expect(jsonData.requestId).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "sanchez",
											"type": "string"
										},
										{
											"key": "username",
											"value": "manuel",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "app/testsAPI/RequestFromUSERWithName.json"
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "caa3ca8d-3883-40b5-b9be-06bd9a2daf9f",
										"exec": [
											"console.log(\"/ws/sec/requests/\"+postman.getEnvironmentVariable(\"requestID\"));\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"console.log(jsonData.name);\r",
											"\r",
											"pm.test(\"request has only name\", function () {\r",
											"   pm.expect(jsonData.name).to.equal('Request From USER With Name');\r",
											"   pm.expect(jsonData.textDescription).to.eq(null);\r",
											"   pm.expect(jsonData.videoDescription).to.eq(null);\r",
											"   pm.expect(jsonData.signId).to.eq(null);\r",
											"   pm.expect(jsonData.signName).to.eq(null);\r",
											"   pm.expect(jsonData.userName).to.eq('manuel');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "sanchez",
											"type": "string"
										},
										{
											"key": "username",
											"value": "manuel",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CreateRequestWithNameAndTextDescription",
					"item": [
						{
							"name": "http://{{domain}}/ws/sec/requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8798da0d-c355-4d29-871d-232b69f71eaf",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"console.log(jsonData);",
											"var requestID = jsonData.requestId;",
											"postman.setEnvironmentVariable(\"requestID\", requestID);",
											"console.log(\"requestID \"+requestID);",
											"",
											"pm.test(\"response must be valid and have a body and a requestID\", function () {",
											"     // assert that the status code is 200",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"     pm.expect(jsonData.requestId).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "sanchez",
											"type": "string"
										},
										{
											"key": "username",
											"value": "manuel",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "app/testsAPI/RequestFromUSERWithNameAndTextDescription.json"
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "385929aa-07c6-40d6-9265-c96ab03ed8da",
										"exec": [
											"console.log(\"/ws/sec/requests/\"+postman.getEnvironmentVariable(\"requestID\"));\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"console.log(jsonData.name);\r",
											"\r",
											"pm.test(\"request has name and text description\", function () {\r",
											"   pm.expect(jsonData.name).to.equal('Request From USER With Name And Text Description');\r",
											"   pm.expect(jsonData.textDescription).to.eq('This is a request create By USER with Name and Text Description');\r",
											"   pm.expect(jsonData.videoDescription).to.eq(null);\r",
											"   pm.expect(jsonData.signId).to.eq(null);\r",
											"   pm.expect(jsonData.signName).to.eq(null);\r",
											"   pm.expect(jsonData.userName).to.eq('manuel');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "sanchez",
											"type": "string"
										},
										{
											"key": "username",
											"value": "manuel",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CreateRequestWithNameAndVideoDescription",
					"item": [
						{
							"name": "http://{{domain}}/ws/sec/requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c611b12f-acf6-46c9-92e9-4c031f24e2b5",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"console.log(jsonData);",
											"var requestID = jsonData.requestId;",
											"postman.setEnvironmentVariable(\"requestID\", requestID);",
											"console.log(\"requestID \"+requestID);",
											"",
											"pm.test(\"response must be valid and have a body and a requestID\", function () {",
											"     // assert that the status code is 200",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"     pm.expect(jsonData.requestId).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "sanchez",
											"type": "string"
										},
										{
											"key": "username",
											"value": "manuel",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "app/testsAPI/RequestFromUSERWithNameAndVideoDescription.json"
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "app/testsAPI/ivs0ljs6ymux16fz2ol.webm"
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "385929aa-07c6-40d6-9265-c96ab03ed8da",
										"exec": [
											"console.log(\"/ws/sec/requests/\"+postman.getEnvironmentVariable(\"requestID\"));\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"console.log(jsonData.name);\r",
											"\r",
											"pm.test(\"request has name and video description\", function () {\r",
											"   pm.expect(jsonData.name).to.equal('Request From USER With Name And Video Description');\r",
											"   pm.expect(jsonData.textDescription).to.eq(null);\r",
											"   pm.expect(jsonData.videoDescription).not.eq(null);\r",
											"   pm.expect(jsonData.signId).to.eq(null);\r",
											"   pm.expect(jsonData.signName).to.eq(null);\r",
											"   pm.expect(jsonData.userName).to.eq('manuel');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "sanchez",
											"type": "string"
										},
										{
											"key": "username",
											"value": "manuel",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CreateRequestWithNameAndAddTextVideoDescription",
					"item": [
						{
							"name": "http://{{domain}}/ws/sec/requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8675312-4c64-4af2-a585-eb7e467104db",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"console.log(jsonData);",
											"var requestID = jsonData.requestId;",
											"postman.setEnvironmentVariable(\"requestID\", requestID);",
											"console.log(\"requestID \"+requestID);",
											"",
											"pm.test(\"response must be valid and have a body and a requestID\", function () {",
											"     // assert that the status code is 200",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"     pm.expect(jsonData.requestId).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "sanchez",
											"type": "string"
										},
										{
											"key": "username",
											"value": "manuel",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "app/testsAPI/RequestFromUSERWithNameAndAddTextVideoDescription.json"
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "caa3ca8d-3883-40b5-b9be-06bd9a2daf9f",
										"exec": [
											"console.log(\"/ws/sec/requests/\"+postman.getEnvironmentVariable(\"requestID\"));\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"console.log(jsonData.name);\r",
											"\r",
											"pm.test(\"request has only name\", function () {\r",
											"   pm.expect(jsonData.name).to.equal('Request From USER With Name And Add Text Video Description');\r",
											"   pm.expect(jsonData.textDescription).to.eq(null);\r",
											"   pm.expect(jsonData.videoDescription).to.eq(null);\r",
											"   pm.expect(jsonData.signId).to.eq(null);\r",
											"   pm.expect(jsonData.signName).to.eq(null);\r",
											"   pm.expect(jsonData.userName).to.eq('manuel');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "sanchez",
											"type": "string"
										},
										{
											"key": "username",
											"value": "manuel",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73a0344c-fa9a-46f7-8738-c33157d21cef",
										"exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
											"pm.test(\"response must be valid and have a body and a requestID\", function () {",
											"     // assert that the status code is 200",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"     pm.expect(jsonData.requestId).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "sanchez",
											"type": "string"
										},
										{
											"key": "username",
											"value": "manuel",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "app/testsAPI/RequestFromUSERAddTextDescription.json"
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "app/testsAPI/ivs0ljs6ymux16fz2ol.webm"
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "caa3ca8d-3883-40b5-b9be-06bd9a2daf9f",
										"exec": [
											"console.log(\"/ws/sec/requests/\"+postman.getEnvironmentVariable(\"requestID\"));\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"console.log(jsonData.name);\r",
											"\r",
											"pm.test(\"request has only name and add text and video description\", function () {\r",
											"   pm.expect(jsonData.name).to.equal('Request From USER With Name And Add Text Video Description');\r",
											"   pm.expect(jsonData.textDescription).to.eq('This is a request modify By USER to add a Text Description');\r",
											"   pm.expect(jsonData.videoDescription).not.eq(null);\r",
											"   pm.expect(jsonData.signId).to.eq(null);\r",
											"   pm.expect(jsonData.signName).to.eq(null);\r",
											"   pm.expect(jsonData.userName).to.eq('manuel');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "sanchez",
											"type": "string"
										},
										{
											"key": "username",
											"value": "manuel",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CreateRequestWithNameAndAddTextAndVideoDescription",
					"item": [
						{
							"name": "http://{{domain}}/ws/sec/requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8675312-4c64-4af2-a585-eb7e467104db",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"console.log(jsonData);",
											"var requestID = jsonData.requestId;",
											"postman.setEnvironmentVariable(\"requestID\", requestID);",
											"console.log(\"requestID \"+requestID);",
											"",
											"pm.test(\"response must be valid and have a body and a requestID\", function () {",
											"     // assert that the status code is 200",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"     pm.expect(jsonData.requestId).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "sanchez",
											"type": "string"
										},
										{
											"key": "username",
											"value": "manuel",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "app/testsAPI/RequestFromUSERWithNameAndAddTextAndVideoDescription.json"
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "caa3ca8d-3883-40b5-b9be-06bd9a2daf9f",
										"exec": [
											"console.log(\"/ws/sec/requests/\"+postman.getEnvironmentVariable(\"requestID\"));\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"console.log(jsonData.name);\r",
											"\r",
											"pm.test(\"request has only name\", function () {\r",
											"   pm.expect(jsonData.name).to.equal('Request From USER With Name And Add Text And Video Description');\r",
											"   pm.expect(jsonData.textDescription).to.eq(null);\r",
											"   pm.expect(jsonData.videoDescription).to.eq(null);\r",
											"   pm.expect(jsonData.signId).to.eq(null);\r",
											"   pm.expect(jsonData.signName).to.eq(null);\r",
											"   pm.expect(jsonData.userName).to.eq('manuel');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "sanchez",
											"type": "string"
										},
										{
											"key": "username",
											"value": "manuel",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "sanchez",
											"type": "string"
										},
										{
											"key": "username",
											"value": "manuel",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "app/testsAPI/RequestFromUSERAddTextDescription.json"
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "caa3ca8d-3883-40b5-b9be-06bd9a2daf9f",
										"exec": [
											"console.log(\"/ws/sec/requests/\"+postman.getEnvironmentVariable(\"requestID\"));\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"console.log(jsonData.name);\r",
											"\r",
											"pm.test(\"request has only name and add text and video description\", function () {\r",
											"   pm.expect(jsonData.name).to.equal('Request From USER With Name And Add Text And Video Description');\r",
											"   pm.expect(jsonData.textDescription).to.eq('This is a request modify By USER to add a Text Description');\r",
											"   pm.expect(jsonData.videoDescription).to.eq(null);\r",
											"   pm.expect(jsonData.signId).to.eq(null);\r",
											"   pm.expect(jsonData.signName).to.eq(null);\r",
											"   pm.expect(jsonData.userName).to.eq('manuel');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "sanchez",
											"type": "string"
										},
										{
											"key": "username",
											"value": "manuel",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2b31b84-eb66-466b-83fb-26c8635266ef",
										"exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
											"pm.test(\"response must be valid and have a body and a requestID\", function () {",
											"     // assert that the status code is 200",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"     pm.expect(jsonData.requestId).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "sanchez",
											"type": "string"
										},
										{
											"key": "username",
											"value": "manuel",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "",
											"disabled": true
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "app/testsAPI/ivs0ljs6ymux16fz2ol.webm"
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "caa3ca8d-3883-40b5-b9be-06bd9a2daf9f",
										"exec": [
											"console.log(\"/ws/sec/requests/\"+postman.getEnvironmentVariable(\"requestID\"));\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"console.log(jsonData.name);\r",
											"\r",
											"pm.test(\"request has only name and add text and video description\", function () {\r",
											"   pm.expect(jsonData.name).to.equal('Request From USER With Name And Add Text And Video Description');\r",
											"   pm.expect(jsonData.textDescription).to.eq('This is a request modify By USER to add a Text Description');\r",
											"   pm.expect(jsonData.videoDescription).not.eq(null);\r",
											"   pm.expect(jsonData.signId).to.eq(null);\r",
											"   pm.expect(jsonData.signName).to.eq(null);\r",
											"   pm.expect(jsonData.userName).to.eq('manuel');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "sanchez",
											"type": "string"
										},
										{
											"key": "username",
											"value": "manuel",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests",
										"{{requestID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
        {
          "name": "CreateRequestWithNameTextVideoDescriptionAndCreateSign",
          "item": [
            {
              "name": "http://{{domain}}/ws/sec/requests",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a8675312-4c64-4af2-a585-eb7e467104db",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "console.log(jsonData);",
                      "var requestID = jsonData.requestId;",
                      "postman.setEnvironmentVariable(\"requestID\", requestID);",
                      "console.log(\"requestID \"+requestID);",
                      "",
                      "pm.test(\"response must be valid and have a body and a requestID\", function () {",
                      "     // assert that the status code is 200",
                      "     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
                      "     // assert that the response has a valid JSON body",
                      "     pm.response.to.be.withBody;",
                      "     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
                      "     pm.expect(jsonData.requestId).to.not.be.null;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "password",
                      "value": "sanchez",
                      "type": "string"
                    },
                    {
                      "key": "username",
                      "value": "manuel",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "data",
                      "description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
                      "type": "file",
                      "src": "app/testsAPI/RequestFromUSERWithNameTextVideoDescription.json"
                    },
                    {
                      "key": "file",
                      "description": "Fichier vidéo descriptif de la demande",
                      "type": "file",
                      "src": "app/testsAPI/ivs0ljs6ymux16fz2ol.webm"
                    }
                  ]
                },
                "url": {
                  "raw": "http://{{domain}}/ws/sec/requests",
                  "protocol": "http",
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "ws",
                    "sec",
                    "requests"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "caa3ca8d-3883-40b5-b9be-06bd9a2daf9f",
                    "exec": [
                      "console.log(\"/ws/sec/requests/\"+postman.getEnvironmentVariable(\"requestID\"));\r",
                      "\r",
                      "var jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "console.log(jsonData.name);\r",
                      "\r",
                      "pm.test(\"request has name text video description\", function () {\r",
                      "   pm.expect(jsonData.name).to.equal('Request From USER With Name Text Video Description');\r",
                      "   pm.expect(jsonData.textDescription).to.eq('This is a request created By USER with Text and Video Description');\r",
                      "   pm.expect(jsonData.videoDescription).not.eq(null);\r",
                      "   pm.expect(jsonData.signId).to.eq(null);\r",
                      "   pm.expect(jsonData.signName).to.eq(null);\r",
                      "   pm.expect(jsonData.userName).to.eq('manuel');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "password",
                      "value": "sanchez",
                      "type": "string"
                    },
                    {
                      "key": "username",
                      "value": "manuel",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
                  "protocol": "http",
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "ws",
                    "sec",
                    "requests",
                    "{{requestID}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "http://{{domain}}/ws/sec/requests/{{requestID}}/signs",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a8675312-4c64-4af2-a585-eb7e467104db",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "console.log(jsonData);",
                      "var signID = jsonData.signId;",
                      "postman.setEnvironmentVariable(\"signID\", signID);",
                      "console.log(\"signID \"+signID);",
                      "",
                      "pm.test(\"response must be valid and have a body and a signID\", function () {",
                      "     // assert that the status code is 200",
                      "     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
                      "     // assert that the response has a valid JSON body",
                      "     pm.response.to.be.withBody;",
                      "     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
                      "     pm.expect(jsonData.signId).to.not.be.null;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "password",
                      "value": "boisset",
                      "type": "string"
                    },
                    {
                      "key": "username",
                      "value": "denisB",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "data",
                      "description": "Fichier json { \"signName\": \"Nom du signe\"(obligatoire)}",
                      "type": "file",
                      "src": "app/testsAPI/SignCreatedByUSER_AInResponseOfRequestFromUSERWithNameTextVideoDescription.json"
                    },
                    {
                      "key": "file",
                      "description": "Fichier vidéo du signe",
                      "type": "file",
                      "src": "app/testsAPI/ivs0ljs6ymux16fz2ol.webm"
                    }
                  ]
                },
                "url": {
                  "raw": "http://{{domain}}/ws/sec/requests/{{requestID}}/signs",
                  "protocol": "http",
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "ws",
                    "sec",
                    "requests",
                    "{{requestID}}",
                    "signs"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "http://{{domain}}/ws/sec/requests/{{requestID}}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "caa3ca8d-3883-40b5-b9be-06bd9a2daf9f",
                    "exec": [
                      "console.log(\"/ws/sec/requests/\"+postman.getEnvironmentVariable(\"requestID\"));\r",
                      "\r",
                      "var jsonData = JSON.parse(responseBody);\r",
                      "var signID = postman.getEnvironmentVariable(\"signID\");\r",
                      "\r",
                      "console.log(jsonData.name);\r",
                      "\r",
                      "pm.test(\"request has name text video description\", function () {\r",
                      "   pm.expect(jsonData.name).to.equal('Request From USER With Name Text Video Description');\r",
                      "   pm.expect(jsonData.textDescription).to.eq('This is a request created By USER with Text and Video Description');\r",
                      "   pm.expect(jsonData.videoDescription).not.eq(null);\r",
                      "   pm.expect(jsonData.signId) == signID;\r",
                      "   pm.expect(jsonData.signName).to.eq(\"Request From USER With Name Text Video Description\");\r",
                      "   pm.expect(jsonData.userName).to.eq('manuel');\r",
                      "});\r",
                      "\r",
                      "postman.setEnvironmentVariable(\"textDescription\",jsonData.textDescription);\r",
                      "postman.setEnvironmentVariable(\"videoDescription\",jsonData.videoDescription);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "password",
                      "value": "sanchez",
                      "type": "string"
                    },
                    {
                      "key": "username",
                      "value": "manuel",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
                  "protocol": "http",
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "ws",
                    "sec",
                    "requests",
                    "{{requestID}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "http://{{domain}}/ws/sec/signs/{{signID}}/videos",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "28448e8a-5d77-4966-b838-107c31e1a8f9",
                    "exec": [
                      "var signID = postman.getEnvironmentVariable(\"signID\");\r",
                      "console.log(\"/ws/sec/signs/\"+signID+\"/videos\");\r",
                      "var jsonData = JSON.parse(responseBody);\r",
                      "console.log(jsonData.signId);\r",
                      "\r",
                      "pm.test(\"sign has only one video\", function () {\r",
                      "   pm.expect(jsonData.length) == 1;\r",
                      "   pm.expect(jsonData[0].signId) == signID;\r",
                      "   pm.expect(jsonData[0].signName).to.eq('Request From USER With Name Text Video Description');\r",
                      "    pm.expect(jsonData[0].videoName).to.eq('Request From USER With Name Text Video Description');\r",
                      "   pm.expect(jsonData[0].createDate).not.eq(null);\r",
                      "   pm.expect(jsonData[0].videoId).not.eq(null);\r",
                      "   pm.expect(jsonData[0].url).not.eq(null);\r",
                      "   pm.expect(jsonData[0].pictureUri).not.eq(null);\r",
                      "});\r",
                      "\r",
                      "postman.setEnvironmentVariable(\"videoID\", jsonData[0].videoId);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "968c78bc-9648-48cd-90ed-293832217694",
                    "exec": [
                      "var signID = postman.getEnvironmentVariable(\"signID\");\r",
                      "if (!signID) {\r",
                      "    throw new Error(\"No signID set\");\r",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "password",
                      "value": "boisset",
                      "type": "string"
                    },
                    {
                      "key": "username",
                      "value": "denisB",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "http://{{domain}}/ws/sec/signs/{{signID}}/videos",
                  "protocol": "http",
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "ws",
                    "sec",
                    "signs",
                    "{{signID}}",
                    "videos"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "http://{{domain}}/ws/sec/videos/{{videoID}}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b1aae60c-4a80-481e-b3af-18ca49b68591",
                    "exec": [
                      "console.log(\"/ws/sec/videos/\"+postman.getEnvironmentVariable(\"videoID\"));\r",
                      "\r",
                      "var jsonData = JSON.parse(responseBody);\r",
                      "var signID = postman.getEnvironmentVariable(\"signID\");\r",
                      "var textDescription = postman.getEnvironmentVariable(\"textDescription\");\r",
                      "var videoDescription = postman.getEnvironmentVariable(\"videoDescription\");\r",
                      "\r",
                      "pm.test(\"video has Name and Text and Video Definition of the Request\", function () {\r",
                      "   pm.expect(jsonData.signId) == signID;\r",
                      "   pm.expect(jsonData.signTextDefinition).to.equal(textDescription);\r",
                      "   pm.expect(jsonData.signVideoDefinition).to.equal(videoDescription);\r",
                      "   pm.expect(jsonData.videoName).to.equal('Request From USER With Name Text Video Description');\r",
                      "   pm.expect(jsonData.url).not.eq(null);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "28063542-c7b3-436b-8763-37c2ea7ce7a1",
                    "exec": [
                      "var videoID = postman.getEnvironmentVariable(\"videoID\");\r",
                      "if (!videoID) {\r",
                      "    throw new Error(\"No videoID set\");\r",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "password",
                      "value": "boisset",
                      "type": "string"
                    },
                    {
                      "key": "username",
                      "value": "denisB",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "http://{{domain}}/ws/sec/videos/{{videoID}}",
                  "protocol": "http",
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "ws",
                    "sec",
                    "videos",
                    "{{videoID}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "http://{{domain}}/ws/sec/videos/{{videoID}}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b1aae60c-4a80-481e-b3af-18ca49b68591",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
                      "pm.test(\"response must be valid and have a body\", function () {\r",
                      "     // assert that the status code is 200\r",
                      "     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
                      "     // assert that the response has a valid JSON body\r",
                      "     pm.response.to.be.withBody;\r",
                      "     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "28063542-c7b3-436b-8763-37c2ea7ce7a1",
                    "exec": [
                      "var videoID = postman.getEnvironmentVariable(\"videoID\");\r",
                      "if (!videoID) {\r",
                      "    throw new Error(\"No videoID set\");\r",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "password",
                      "value": "boisset",
                      "type": "string"
                    },
                    {
                      "key": "username",
                      "value": "denisB",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "http://{{domain}}/ws/sec/videos/{{videoID}}",
                  "protocol": "http",
                  "host": [
                    "{{domain}}"
                  ],
                  "path": [
                    "ws",
                    "sec",
                    "videos",
                    "{{videoID}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
			]
		},
		{
			"name": "GetOtherRequests",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/users/other/requests?sort=date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8f57e55-4d60-4ddd-ae53-490829d1a29e",
								"exec": [
									"console.log(\"/ws/sec/users/other/requests?sort=date\");\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"var schema = {\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"textDescription\": {\r",
                  "            \"type\": [\"string\",\"null\"]\r",
									"        },\r",
									"        \"videoDescription\": {\r",
									"            \"type\": [\"string\",\"null\"]\r",
									"        },\r",
									"        \"date\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"         \"signId\": {\r",
									"            \"type\": [\"string\", \"null\"]\r",
									"        },\r",
									"         \"signName\": {\r",
									"            \"type\": [\"string\", \"null\"]\r",
									"        },\r",
									"         \"userName\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"id\",\"name\", \"date\", \"userName\"]\r",
									"}\r",
									"\r",
									"console.log(jsonData);\r",
									"\r",
									"jsonData.forEach(function(otherRequest) {\r",
									"var testTitle = \"otherRequest \" + otherRequest.id + \" conforms to schema\";\r",
									"tests[testTitle] = tv4.validate(otherRequest, schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/users/other/requests?sort=date",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"users",
								"other",
								"requests"
							],
							"query": [
								{
									"key": "sort",
									"value": "date"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetOtherRequestsSortByDateDesc",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/users/other/requests?sort=date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ef4da4d-5fce-43bc-a6cc-aa0dfcb72661",
								"exec": [
									"var _ = require('lodash'),\r",
									"\r",
									"    // Parse the array returned in the response body (It is probably a stringified response)\r",
									"    responseArray = JSON.parse(responseBody);\r",
									"\r",
									"pm.test('Other Requests are sorted order by create date desc', () => {\r",
									"    // Use the responseArray here\r",
									"    var expectedSortedOrder = _.orderBy(responseArray, ['date'],['desc']);\r",
									"\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/users/other/requests?sort=date",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"users",
								"other",
								"requests"
							],
							"query": [
								{
									"key": "sort",
									"value": "date"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetOtherRequestsSortByDateAsc",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/users/other/requests?sort=-date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36b278ef-6244-4e76-9df7-eacf9c45852c",
								"exec": [
									"var _ = require('lodash'),\r",
									"\r",
									"    // Parse the array returned in the response body (It is probably a stringified response)\r",
									"    responseArray = JSON.parse(responseBody);\r",
									"\r",
									"pm.test('Other Requests are sorted order by create date asc', () => {\r",
									"    // Use the responseArray here\r",
									"    var expectedSortedOrder = _.orderBy(responseArray, ['date'],['asc']);\r",
									"\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/users/other/requests?sort=-date",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"users",
								"other",
								"requests"
							],
							"query": [
								{
									"key": "sort",
									"value": "-date"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetOtherRequestsSortByNameAsc",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/users/other/requests?sort=name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1c45a01-1072-4822-8891-3381d5beaaf2",
								"exec": [
									"var _ = require('lodash'),\r",
									"\r",
									"    // Parse the array returned in the response body (It is probably a stringified response)\r",
									"    responseArray = JSON.parse(responseBody);\r",
									"\r",
									"var lowerCaseRequests = _.clone(responseArray);\r",
									"lowerCaseRequests = lowerCaseRequests.map(request => {\r",
									"   request.name = _.deburr(request.name.toLowerCase()); \r",
									"   return request;\r",
									"});\r",
									"\r",
									"pm.test('Other Requests are sorted order by name asc', () => {\r",
									"    // Use the responseArray here\r",
									"    var expectedSortedOrder = _.orderBy(lowerCaseRequests, ['name'],['asc']);\r",
									"\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/users/other/requests?sort=name",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"users",
								"other",
								"requests"
							],
							"query": [
								{
									"key": "sort",
									"value": "name"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetOtherRequestsSortByNameDesc",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/users/other/requests?sort=-name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d1e65cf-22ca-4f17-bcd5-0b80829dd46e",
								"exec": [
									"var _ = require('lodash'),\r",
									"\r",
									"    // Parse the array returned in the response body (It is probably a stringified response)\r",
									"    responseArray = JSON.parse(responseBody);\r",
									"\r",
									"var lowerCaseRequests = _.clone(responseArray);\r",
									"lowerCaseRequests = lowerCaseRequests.map(request => {\r",
									"   request.name = _.deburr(request.name.toLowerCase()); \r",
									"   return request;\r",
									"});\r",
									"\r",
									"pm.test('Other Requests are sorted order by name desc', () => {\r",
									"    // Use the responseArray here\r",
									"    var expectedSortedOrder = _.orderBy(lowerCaseRequests, ['name'],['desc']);\r",
									"\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/users/other/requests?sort=-name",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"users",
								"other",
								"requests"
							],
							"query": [
								{
									"key": "sort",
									"value": "-name"
								}
							]
						}
					},
					"response": []
				}
			]
		},
    {
      "name": "DeleteAllMyRequests",
      "item": [
        {
          "name": "http://{{domain}}/ws/sec/users/me/requests",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c593ffdf-3080-4b8f-a3c3-115f8628cb17",
                "exec": [
                  "console.log(\"/ws/sec/users/me/requests\");\r",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "var schema = {\r",
                  "    \"properties\": {\r",
                  "        \"id\": {\r",
                  "            \"type\": \"integer\"\r",
                  "        },\r",
                  "        \"name\": {\r",
                  "            \"type\": \"string\"\r",
                  "        },\r",
                  "        \"textDescription\": {\r",
                  "            \"type\": [\"string\",\"null\"]\r",
                  "        },\r",
                  "        \"videoDescription\": {\r",
                  "            \"type\": [\"string\",\"null\"]\r",
                  "        },\r",
                  "        \"date\": {\r",
                  "            \"type\": \"number\"\r",
                  "        },\r",
                  "         \"signId\": {\r",
                  "            \"type\": [\"string\", \"null\"]\r",
                  "        },\r",
                  "         \"signName\": {\r",
                  "            \"type\": [\"string\", \"null\"]\r",
                  "        },\r",
                  "         \"userName\": {\r",
                  "            \"type\": \"string\"\r",
                  "        }\r",
                  "    },\r",
                  "    \"required\": [\"id\",\"name\", \"date\", \"userName\"]\r",
                  "}\r",
                  "\r",
                  "console.log(jsonData);\r",
                  "var requestIDs = [];\r",
                  "\r",
                  "jsonData.forEach(function(myRequest) {\r",
                  "var testTitle = \"myRequest \" + myRequest.id + \" conforms to schema\";\r",
                  "requestIDs.push(myRequest.id);\r",
                  "tests[testTitle] = tv4.validate(myRequest, schema);\r",
                  "});\r",
                  "\r",
                  "postman.setEnvironmentVariable(\"requestID\", requestIDs.shift());\r",
                  "postman.setEnvironmentVariable(\"requestIDs\", JSON.stringify(requestIDs));\r",
                  "postman.setNextRequest(\"Delete my Requests\");\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "key": "password",
                  "value": "boisset",
                  "type": "string"
                },
                {
                  "key": "username",
                  "value": "denisB",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "http://{{domain}}/ws/sec/users/me/requests",
              "protocol": "http",
              "host": [
                "{{domain}}"
              ],
              "path": [
                "ws",
                "sec",
                "users",
                "me",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete my Requests",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c6b9984f-dab1-401c-a3f0-6b1751bbef43",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "pm.test(\"response must be valid and have a body and a requestID\", function () {\r",
                  "     // assert that the status code is 200\r",
                  "     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
                  "     // assert that the response has a valid JSON body\r",
                  "     pm.response.to.be.withBody;\r",
                  "     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
                  "     pm.expect(jsonData.requestId).to.not.be.null;\r",
                  "});\r",
                  "\r",
                  "var requestIDs = JSON.parse(postman.getEnvironmentVariable(\"requestIDs\"));\r",
                  "if (requestIDs.length > 0) {\r",
                  "    postman.setEnvironmentVariable(\"requestID\", requestIDs.shift());\r",
                  "    postman.setEnvironmentVariable(\"requestIDs\", JSON.stringify(requestIDs));\r",
                  "    postman.setNextRequest(\"Delete my Requests\");\r",
                  "} else {\r",
                  "    postman.clearEnvironmentVariable(\"requestID\");\r",
                  "    postman.clearEnvironmentVariable(\"requestIDs\");\r",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "key": "password",
                  "value": "boisset",
                  "type": "string"
                },
                {
                  "key": "username",
                  "value": "denisB",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "body": {},
            "url": {
              "raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
              "protocol": "http",
              "host": [
                "{{domain}}"
              ],
              "path": [
                "ws",
                "sec",
                "requests",
                "{{requestID}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "DeleteAllOtherRequests",
      "item": [
        {
          "name": "http://{{domain}}/ws/sec/users/other/requests?sort=name",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c593ffdf-3080-4b8f-a3c3-115f8628cb17",
                "exec": [
                  "console.log(\"/ws/sec/users/other/requests\");\r",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "var schema = {\r",
                  "    \"properties\": {\r",
                  "        \"id\": {\r",
                  "            \"type\": \"integer\"\r",
                  "        },\r",
                  "        \"name\": {\r",
                  "            \"type\": \"string\"\r",
                  "        },\r",
                  "        \"textDescription\": {\r",
                  "            \"type\": [\"string\",\"null\"]\r",
                  "        },\r",
                  "        \"videoDescription\": {\r",
                  "            \"type\": [\"string\",\"null\"]\r",
                  "        },\r",
                  "        \"date\": {\r",
                  "            \"type\": \"number\"\r",
                  "        },\r",
                  "         \"signId\": {\r",
                  "            \"type\": [\"string\", \"null\"]\r",
                  "        },\r",
                  "         \"signName\": {\r",
                  "            \"type\": [\"string\", \"null\"]\r",
                  "        },\r",
                  "         \"userName\": {\r",
                  "            \"type\": \"string\"\r",
                  "        }\r",
                  "    },\r",
                  "    \"required\": [\"id\",\"name\", \"date\", \"userName\"]\r",
                  "}\r",
                  "\r",
                  "console.log(jsonData);\r",
                  "var requestIDs = [];\r",
                  "\r",
                  "jsonData.forEach(function(myRequest) {\r",
                  "var testTitle = \"myRequest \" + myRequest.id + \" conforms to schema\";\r",
                  "requestIDs.push(myRequest.id);\r",
                  "tests[testTitle] = tv4.validate(myRequest, schema);\r",
                  "});\r",
                  "\r",
                  "postman.setEnvironmentVariable(\"requestID\", requestIDs.shift());\r",
                  "postman.setEnvironmentVariable(\"requestIDs\", JSON.stringify(requestIDs));\r",
                  "postman.setNextRequest(\"Delete other Requests\");\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "key": "password",
                  "value": "boisset",
                  "type": "string"
                },
                {
                  "key": "username",
                  "value": "denisB",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "http://{{domain}}/ws/sec/users/other/requests?sort=name",
              "protocol": "http",
              "host": [
                "{{domain}}"
              ],
              "path": [
                "ws",
                "sec",
                "users",
                "other",
                "requests"
              ],
              "query": [
                {
                  "key": "sort",
                  "value": "name"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete other Requests",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c6b9984f-dab1-401c-a3f0-6b1751bbef43",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "pm.test(\"response must be valid and have a body and a requestID\", function () {\r",
                  "     // assert that the status code is 200\r",
                  "     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
                  "     // assert that the response has a valid JSON body\r",
                  "     pm.response.to.be.withBody;\r",
                  "     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
                  "     pm.expect(jsonData.requestId).to.not.be.null;\r",
                  "});\r",
                  "\r",
                  "var requestIDs = JSON.parse(postman.getEnvironmentVariable(\"requestIDs\"));\r",
                  "if (requestIDs.length > 0) {\r",
                  "    postman.setEnvironmentVariable(\"requestID\", requestIDs.shift());\r",
                  "    postman.setEnvironmentVariable(\"requestIDs\", JSON.stringify(requestIDs));\r",
                  "    postman.setNextRequest(\"Delete other Requests\");\r",
                  "} else {\r",
                  "    postman.clearEnvironmentVariable(\"requestID\");\r",
                  "    postman.clearEnvironmentVariable(\"requestIDs\");\r",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "key": "password",
                  "value": "sanchez",
                  "type": "string"
                },
                {
                  "key": "username",
                  "value": "manuel",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "body": {},
            "url": {
              "raw": "http://{{domain}}/ws/sec/requests/{{requestID}}",
              "protocol": "http",
              "host": [
                "{{domain}}"
              ],
              "path": [
                "ws",
                "sec",
                "requests",
                "{{requestID}}"
              ]
            }
          },
          "response": []
        }
      ]
    }
	]
}